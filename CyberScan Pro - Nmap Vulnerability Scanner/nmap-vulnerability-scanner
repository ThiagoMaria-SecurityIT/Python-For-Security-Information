import sys
import nmap
import yaml
import json
import socket
import netifaces
import ipaddress
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QTextEdit, QComboBox,
    QProgressBar, QTabWidget, QListWidget, QSplitter,
    QFrame, QTableWidget, QTableWidgetItem, QMessageBox,
    QFileDialog, QStatusBar
)
from PyQt5.QtCore import Qt, QSize, QThread, pyqtSignal
from PyQt5.QtGui import QFont, QIcon, QColor, QTextCursor

class NetworkUtils:
    @staticmethod
    def get_local_network():
        """Get the local network CIDR where the host is located"""
        try:
            interfaces = netifaces.interfaces()
            for interface in interfaces:
                addrs = netifaces.ifaddresses(interface)
                if netifaces.AF_INET in addrs:
                    for addr_info in addrs[netifaces.AF_INET]:
                        if 'addr' in addr_info and 'netmask' in addr_info:
                            ip = addr_info['addr']
                            netmask = addr_info['netmask']
                            
                            # Skip localhost and docker interfaces
                            if ip.startswith('127.') or ip.startswith('172.') or 'docker' in interface:
                                continue
                                
                            if ip and netmask:
                                network = ipaddress.IPv4Network(f"{ip}/{netmask}", strict=False)
                                return str(network)
        except Exception as e:
            print(f"Error detecting network: {e}")
        return None

    @staticmethod
    def get_default_gateway():
        """Get the default gateway IP"""
        try:
            gws = netifaces.gateways()
            return gws['default'][netifaces.AF_INET][0]
        except:
            return None

class NmapScanner:
    def __init__(self, config_file='config.yml'):
        self.nm = nmap.PortScanner()
        self.config = self.load_config(config_file)
    
    def load_config(self, config_file):
        default_config = {
            'scan': {
                'ports': '1-1000',
                'timing': 4,
                'version_detection': True,
                'os_detection': True
            },
            'scripts': {
                'enable': True,
                'timeout': '90s'
            }
        }
        try:
            with open(config_file) as f:
                user_config = yaml.safe_load(f) or {}
            return {**default_config, **user_config}
        except (FileNotFoundError, yaml.YAMLError):
            return default_config
    
    def scan_target(self, target):
        try:
            scan_args = self._build_scan_args() + " --host-timeout 30m"
            return self.nm.scan(hosts=target, arguments=scan_args)
        except nmap.PortScannerError as e:
            raise Exception(f"Nmap scan error: {str(e)}")
        except Exception as e:
            raise Exception(f"Unexpected error during scan: {str(e)}")
    
    def _build_scan_args(self):
        args = []
        if self.config['scan']['ports']:
            args.append(f"-p {self.config['scan']['ports']}")
        args.append(f"-T{self.config['scan']['timing']}")
        if self.config['scripts']['enable']:
            args.append("--script=vuln")
        if self.config['scan']['version_detection']:
            args.append("-sV")
        if self.config['scan']['os_detection']:
            args.append("-O")
        return ' '.join(args)
    
    def parse_results(self, scan_data):
        results = {
            'hosts': [],
            'scan_info': {
                'command_line': scan_data.get('nmap', {}).get('command_line', 'N/A'),
                'scanstats': scan_data.get('nmap', {}).get('scanstats', {})
            },
            'timestamp': datetime.now().isoformat(),
            'vulnerabilities': []
        }
        
        for host, host_data in scan_data.get('scan', {}).items():
            host_info = self._parse_host(host, host_data)
            results['hosts'].append(host_info)
            results['vulnerabilities'].extend(host_info['vulnerabilities'])
        
        return results
    
    def _parse_host(self, host, host_data):
        host_info = {
            'host': host,
            'status': host_data.get('status', {'state': 'unknown'}),
            'ports': [],
            'os': host_data.get('osmatch', []),
            'vulnerabilities': []
        }
        
        for proto in ['tcp', 'udp']:
            if proto in host_data:
                for port, port_data in host_data[proto].items():
                    port_info = self._parse_port(port, port_data)
                    host_info['ports'].append(port_info)
                    host_info['vulnerabilities'].extend(port_info['vulnerabilities'])
        
        return host_info
    
    def _parse_port(self, port, port_data):
        port_info = {
            'port': port,
            'protocol': port_data.get('protocol', 'tcp'),
            'state': port_data.get('state', 'unknown'),
            'service': port_data.get('name', 'unknown'),
            'version': port_data.get('version', ''),
            'scripts': [],
            'vulnerabilities': []
        }
        
        for script in port_data.get('script', []):
            script_info = {
                'id': script,
                'output': port_data['script'][script]
            }
            port_info['scripts'].append(script_info)
            
            if 'vuln' in script.lower():
                vuln = self._parse_vulnerability(port_info, script, port_data['script'][script])
                port_info['vulnerabilities'].append(vuln)
        
        return port_info
    
    def _parse_vulnerability(self, port_info, script_name, script_output):
        return {
            'host': port_info.get('host', 'unknown'),
            'port': port_info['port'],
            'protocol': port_info['protocol'],
            'service': port_info['service'],
            'name': script_name,
            'output': script_output,
            'severity': self._determine_severity(script_name, script_output)
        }
    
    def _determine_severity(self, script_name, script_output):
        output = script_output.lower()
        if 'high' in output or 'critical' in output:
            return 'high'
        elif 'medium' in output:
            return 'medium'
        elif 'low' in output:
            return 'low'
        return 'unknown'

class ScannerThread(QThread):
    scan_complete = pyqtSignal(dict)
    scan_error = pyqtSignal(str)
    progress_update = pyqtSignal(int, str)
    log_message = pyqtSignal(str)
    
    def __init__(self, scanner, target):
        super().__init__()
        self.scanner = scanner
        self.target = target
    
    def run(self):
        try:
            self.log_message.emit(f"Starting scan of {self.target}")
            self.progress_update.emit(10, "Initializing scan...")
            
            raw_results = self.scanner.scan_target(self.target)
            self.progress_update.emit(50, "Parsing results...")
            
            results = self.scanner.parse_results(raw_results)
            self.progress_update.emit(90, "Finalizing...")
            
            self.scan_complete.emit(results)
            self.progress_update.emit(100, "Scan complete")
        except Exception as e:
            self.scan_error.emit(str(e))
            self.progress_update.emit(0, "Scan failed")

class NmapScannerUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.scanner = NmapScanner()
        self.current_results = None
        self.init_ui()
        
    def init_ui(self):
        self.setWindowTitle("CyberScan Pro")
        self.setGeometry(100, 100, 1200, 800)
        self.set_dark_theme()
        
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        self.main_layout = QVBoxLayout()
        main_widget.setLayout(self.main_layout)
        
        self.create_header()
        self.create_scan_section()
        self.create_results_section()
        self.create_status_bar()
        
        self.scan_button.clicked.connect(self.start_scan)
        self.export_btn.clicked.connect(self.export_report)
    
    def set_dark_theme(self):
        self.setStyleSheet("""
            QMainWindow, QWidget {
                background-color: #1e1e1e;
                color: #e0e0e0;
            }
            QLabel, QPushButton, QComboBox, QLineEdit, QTextEdit, QTabWidget::pane {
                color: #e0e0e0;
            }
            QPushButton {
                background-color: #2a2a2a;
                border: 1px solid #3a3a3a;
                padding: 5px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #3a3a3a;
            }
            QPushButton:pressed {
                background-color: #1a1a1a;
            }
            QLineEdit, QTextEdit, QComboBox, QListWidget {
                background-color: #252525;
                border: 1px solid #3a3a3a;
                padding: 5px;
                border-radius: 4px;
            }
            QTabWidget::pane {
                border: 1px solid #3a3a3a;
                background: #252525;
            }
            QTabBar::tab {
                background: #2a2a2a;
                color: #e0e0e0;
                padding: 8px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }
            QTabBar::tab:selected {
                background: #353535;
                border-bottom: 2px solid #4a9bff;
            }
            QTableWidget {
                background-color: #252525;
                gridline-color: #3a3a3a;
                color: #e0e0e0;
            }
            QHeaderView::section {
                background-color: #2a2a2a;
                color: #e0e0e0;
                padding: 5px;
                border: none;
            }
            QProgressBar {
                border: 1px solid #3a3a3a;
                border-radius: 4px;
                text-align: center;
                color: #e0e0e0;
            }
            QProgressBar::chunk {
                background-color: #4a9bff;
            }
            QListWidget::item:selected {
                background-color: #3a3a3a;
                color: #ffffff;
            }
        """)
    
    def create_header(self):
        header = QWidget()
        header_layout = QHBoxLayout(header)
        
        title = QLabel("CyberScan Pro - Nmap Vulnerability Scanner")
        title.setFont(QFont("Arial", 16, QFont.Bold))
        
        self.export_btn = QPushButton("Export Report")
        self.export_btn.setFixedWidth(120)
        
        header_layout.addWidget(title)
        header_layout.addWidget(self.export_btn)
        self.main_layout.addWidget(header)
    
    def create_scan_section(self):
        scan_frame = QFrame()
        scan_frame.setFrameShape(QFrame.StyledPanel)
        scan_layout = QVBoxLayout(scan_frame)
        
        # Target input row
        target_layout = QHBoxLayout()
        target_layout.addWidget(QLabel("Target:"))
        
        self.target_input = QLineEdit()
        self.target_input.setPlaceholderText("IP, Hostname or CIDR (e.g., 192.168.1.0/24)")
        target_layout.addWidget(self.target_input)
        
        self.scan_local_btn = QPushButton("Scan My Network")
        self.scan_local_btn.setFixedWidth(150)
        self.scan_local_btn.clicked.connect(self.scan_local_network)
        target_layout.addWidget(self.scan_local_btn)
        
        # Scan options row
        options_layout = QHBoxLayout()
        options_layout.addWidget(QLabel("Profile:"))
        
        self.profile_combo = QComboBox()
        self.profile_combo.addItems(["Quick Scan", "Full Scan", "Vulnerability Scan", "Custom"])
        options_layout.addWidget(self.profile_combo)
        
        # Scan button
        self.scan_button = QPushButton("Start Scan")
        self.scan_button.setFixedHeight(40)
        self.scan_button.setFont(QFont("Arial", 10, QFont.Bold))
        
        # Tips label
        tips = QLabel("Tip: For large networks, scan smaller ranges (e.g., 192.168.1.0/24)")
        tips.setStyleSheet("color: #888; font-style: italic;")
        
        scan_layout.addLayout(target_layout)
        scan_layout.addLayout(options_layout)
        scan_layout.addWidget(self.scan_button)
        scan_layout.addWidget(tips)
        self.main_layout.addWidget(scan_frame)
    
    def create_results_section(self):
        splitter = QSplitter(Qt.Vertical)
        
        # Results tabs
        self.results_tabs = QTabWidget()
        
        # Summary tab
        summary_tab = QWidget()
        summary_layout = QVBoxLayout(summary_tab)
        self.summary_text = QTextEdit()
        self.summary_text.setReadOnly(True)
        summary_layout.addWidget(self.summary_text)
        self.results_tabs.addTab(summary_tab, "Summary")
        
        # Vulnerabilities tab
        vuln_tab = QWidget()
        vuln_layout = QVBoxLayout(vuln_tab)
        self.vuln_table = QTableWidget(0, 5)
        self.vuln_table.setHorizontalHeaderLabels(["Host", "Port", "Service", "Vulnerability", "Severity"])
        self.vuln_table.horizontalHeader().setStretchLastSection(True)
        vuln_layout.addWidget(self.vuln_table)
        self.results_tabs.addTab(vuln_tab, "Vulnerabilities")
        
        # Hosts tab
        hosts_tab = QWidget()
        hosts_layout = QHBoxLayout(hosts_tab)
        self.hosts_list = QListWidget()
        self.host_details = QTextEdit()
        self.host_details.setReadOnly(True)
        hosts_layout.addWidget(self.hosts_list, 1)
        hosts_layout.addWidget(self.host_details, 2)
        self.results_tabs.addTab(hosts_tab, "Hosts")
        
        splitter.addWidget(self.results_tabs)
        
        # Log output
        log_frame = QFrame()
        log_frame.setFrameShape(QFrame.StyledPanel)
        log_layout = QVBoxLayout(log_frame)
        self.log_output = QTextEdit()
        self.log_output.setReadOnly(True)
        log_layout.addWidget(QLabel("Scan Log:"))
        log_layout.addWidget(self.log_output)
        splitter.addWidget(log_frame)
        
        splitter.setSizes([600, 200])
        self.main_layout.addWidget(splitter)
    
    def create_status_bar(self):
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setMaximumSize(200, 20)
        self.progress_bar.setTextVisible(False)
        
        self.status_label = QLabel("Ready")
        self.scan_time_label = QLabel()
        
        self.status_bar.addPermanentWidget(self.progress_bar, 1)
        self.status_bar.addPermanentWidget(self.scan_time_label, 2)
        self.status_bar.addWidget(self.status_label)
    
    def validate_target(self, target):
        """Validate target input before scanning"""
        try:
            if not target:
                return False
            
            if '/' not in target:
                ipaddress.ip_address(target)
                return True
            
            network = ipaddress.ip_network(target, strict=False)
            
            if network.num_addresses > 256:
                reply = QMessageBox.question(
                    self, 'Large Range', 
                    f'This will scan {network.num_addresses} IPs. Continue?',
                    QMessageBox.Yes | QMessageBox.No
                )
                return reply == QMessageBox.Yes
            return True
        except ValueError:
            QMessageBox.warning(self, "Invalid Target", "Please enter a valid IP or CIDR range")
            return False
    
    def scan_local_network(self):
        network = NetworkUtils.get_local_network()
        if not network:
            QMessageBox.warning(self, "Network Error", 
                              "Could not automatically detect your local network.\n"
                              "Please enter the target manually.")
            return
            
        base_network = ipaddress.IPv4Network(network)
        suggested_network = f"{base_network.network_address}/24"
        
        reply = QMessageBox.question(
            self, 'Confirm Scan',
            f"Detected local network: {network}\n\n"
            f"For safety, we'll scan {suggested_network} (~256 hosts).\n"
            "Would you like to proceed?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.target_input.setText(suggested_network)
            self.start_scan()
    
    def log_message(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_output.append(f"[{timestamp}] {message}")
        self.log_output.moveCursor(QTextCursor.End)
    
    def start_scan(self):
        target = self.target_input.text().strip()
        if not self.validate_target(target):
            return
        
        self.log_message(f"Starting scan of {target}")
        self.status_label.setText("Scanning...")
        self.scan_button.setEnabled(False)
        self.export_btn.setEnabled(False)
        self.progress_bar.setValue(0)
        
        self.scanner_thread = ScannerThread(self.scanner, target)
        self.scanner_thread.scan_complete.connect(self.on_scan_complete)
        self.scanner_thread.scan_error.connect(self.on_scan_error)
        self.scanner_thread.progress_update.connect(self.update_progress)
        self.scanner_thread.log_message.connect(self.log_message)
        self.scanner_thread.start()
    
    def on_scan_complete(self, results):
        self.current_results = results
        self.update_ui_with_results(results)
        self.log_message("Scan completed successfully")
        self.status_label.setText("Ready")
        self.scan_button.setEnabled(True)
        self.export_btn.setEnabled(True)
        self.scan_time_label.setText(f"Scan time: {results['scan_info']['scanstats'].get('elapsed', 'N/A')}s")
    
    def on_scan_error(self, error_msg):
        self.log_message(f"ERROR: {error_msg}")
        QMessageBox.critical(self, "Scan Error", f"Scan failed:\n{error_msg}")
        self.status_label.setText("Ready")
        self.scan_button.setEnabled(True)
        self.progress_bar.setValue(0)
    
    def update_progress(self, value, message):
        self.progress_bar.setValue(value)
        self.status_label.setText(message)
    
    def update_ui_with_results(self, results):
        # Update summary
        summary = [
            "Scan Summary",
            "="*40,
            f"Target: {results['scan_info'].get('command_line', 'N/A')}",
            f"Hosts scanned: {len(results['hosts'])}",
            f"Vulnerabilities found: {len(results['vulnerabilities'])}",
            f"Scan duration: {results['scan_info']['scanstats'].get('elapsed', 'N/A')} seconds"
        ]
        self.summary_text.setPlainText("\n".join(summary))
        
        # Update vulnerabilities table
        self.vuln_table.setRowCount(0)
        for row, vuln in enumerate(results['vulnerabilities']):
            self.vuln_table.insertRow(row)
            self.vuln_table.setItem(row, 0, QTableWidgetItem(vuln['host']))
            self.vuln_table.setItem(row, 1, QTableWidgetItem(str(vuln['port'])))
            self.vuln_table.setItem(row, 2, QTableWidgetItem(vuln['service']))
            self.vuln_table.setItem(row, 3, QTableWidgetItem(vuln['name']))
            
            severity = QTableWidgetItem(vuln['severity'].capitalize())
            if vuln['severity'] == 'high':
                severity.setBackground(QColor(200, 50, 50))
            elif vuln['severity'] == 'medium':
                severity.setBackground(QColor(200, 150, 50))
            elif vuln['severity'] == 'low':
                severity.setBackground(QColor(50, 150, 50))
            self.vuln_table.setItem(row, 4, severity)
        
        # Update hosts list
        self.hosts_list.clear()
        for host in results['hosts']:
            self.hosts_list.addItem(host['host'])
        self.hosts_list.itemClicked.connect(self.show_host_details)
    
    def show_host_details(self, item):
        host = item.text()
        for h in self.current_results['hosts']:
            if h['host'] == host:
                details = [
                    f"Host: {host}",
                    f"Status: {h['status'].get('state', 'unknown')}",
                    "",
                    "Open Ports:"
                ]
                for port in h['ports']:
                    details.append(f"- {port['port']}/{port['protocol']} {port['service']} ({port['state']})")
                
                if h['os']:
                    details.extend(["", "OS Detection:"])
                    for os in h['os']:
                        details.append(f"- {os.get('name', 'Unknown')} ({os.get('accuracy', '?')}%)")
                
                self.host_details.setPlainText("\n".join(details))
                break
    
    def export_report(self):
        if not self.current_results:
            QMessageBox.warning(self, "Export Error", "No scan results to export")
            return
        
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getSaveFileName(
            self, "Save Report", "", 
            "HTML Files (*.html);;JSON Files (*.json);;Text Files (*.txt)", 
            options=options)
        
        if not file_name:
            return
        
        try:
            if file_name.endswith('.html'):
                content = self.generate_html_report()
            elif file_name.endswith('.json'):
                content = json.dumps(self.current_results, indent=2)
            else:
                content = self.generate_text_report()
            
            with open(file_name, 'w') as f:
                f.write(content)
            
            self.log_message(f"Report saved to {file_name}")
            QMessageBox.information(self, "Success", "Report exported successfully")
        except Exception as e:
            QMessageBox.critical(self, "Export Error", f"Failed to export report:\n{str(e)}")
            self.log_message(f"Export failed: {str(e)}")
    
    def generate_html_report(self):
        vuln_rows = []
        for vuln in self.current_results['vulnerabilities']:
            vuln_rows.append(f"""
            <tr class="{vuln['severity']}">
                <td>{vuln['host']}</td>
                <td>{vuln['port']}</td>
                <td>{vuln['service']}</td>
                <td>{vuln['name']}</td>
                <td>{vuln['severity'].capitalize()}</td>
            </tr>
            """)
        
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>CyberScan Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                h1 {{ color: #4a9bff; }}
                table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #2a2a2a; color: white; }}
                .high {{ background-color: #ffcccc; }}
                .medium {{ background-color: #ffe6cc; }}
                .low {{ background-color: #e6ffcc; }}
                pre {{ background: #f5f5f5; padding: 10px; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <h1>CyberScan Vulnerability Report</h1>
            <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            
            <h2>Scan Summary</h2>
            <p><strong>Target:</strong> {self.current_results['scan_info'].get('command_line', 'N/A')}</p>
            <p><strong>Hosts scanned:</strong> {len(self.current_results['hosts'])}</p>
            <p><strong>Vulnerabilities found:</strong> {len(self.current_results['vulnerabilities'])}</p>
            <p><strong>Scan duration:</strong> {self.current_results['scan_info']['scanstats'].get('elapsed', 'N/A')} seconds</p>
            
            <h2>Vulnerabilities</h2>
            <table>
                <tr>
                    <th>Host</th>
                    <th>Port</th>
                    <th>Service</th>
                    <th>Vulnerability</th>
                    <th>Severity</th>
                </tr>
                {''.join(vuln_rows)}
            </table>
        </body>
        </html>
        """
    
    def generate_text_report(self):
        report = [
            "CyberScan Vulnerability Report",
            "="*60,
            f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "Scan Summary",
            "-"*60,
            f"Target: {self.current_results['scan_info'].get('command_line', 'N/A')}",
            f"Hosts scanned: {len(self.current_results['hosts'])}",
            f"Vulnerabilities found: {len(self.current_results['vulnerabilities'])}",
            f"Scan duration: {self.current_results['scan_info']['scanstats'].get('elapsed', 'N/A')} seconds",
            "",
            "Vulnerabilities",
            "-"*60
        ]
        
        for vuln in self.current_results['vulnerabilities']:
            report.extend([
                f"Host: {vuln['host']}",
                f"Port: {vuln['port']}/{vuln['protocol']}",
                f"Service: {vuln['service']}",
                f"Vulnerability: {vuln['name']}",
                f"Severity: {vuln['severity'].capitalize()}",
                "-"*40
            ])
        
        return "\n".join(report)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = NmapScannerUI()
    window.show()
    sys.exit(app.exec_())
